From 282c5be0cf45eb8bf879aba4afcfccc849189cff Mon Sep 17 00:00:00 2001
From: Marko Lindqvist <cazfi74@gmail.com>
Date: Mon, 21 Nov 2022 04:16:05 +0200
Subject: [PATCH 04/29] Split nationalities list from PACKET_CITY_INFO to a
 separate packet

See osdn #46079

Signed-off-by: Marko Lindqvist <cazfi74@gmail.com>
---
 client/packhand.c             | 30 ++++++++++++++++++++----------
 common/fc_types.h             |  2 ++
 common/networking/packets.def | 15 +++++++++------
 server/citizenshand.h         |  4 +---
 server/citytools.c            | 24 ++++++++++++++++--------
 server/citytools.h            | 21 +++++++++++----------
 server/diplomats.c            |  4 +++-
 7 files changed, 62 insertions(+), 38 deletions(-)

diff --git a/client/packhand.c b/client/packhand.c
index 2dafee7fff..1697b5df0f 100644
--- a/client/packhand.c
+++ b/client/packhand.c
@@ -781,16 +781,6 @@ void handle_city_info(const struct packet_city_info *packet)
     city_size_set(pcity, packet->size);
   }
 
-  /* The nationality of the citizens. */
-  if (game.info.citizen_nationality) {
-    citizens_init(pcity);
-    for (i = 0; i < packet->nationalities_count; i++) {
-      citizens_nation_set(pcity, player_slot_by_number(packet->nation_id[i]),
-                          packet->nation_citizens[i]);
-    }
-    fc_assert(citizens_count(pcity) == city_size_get(pcity));
-  }
-
   pcity->history = packet->history;
   pcity->client.culture = packet->culture;
   pcity->client.buy_cost = packet->buy_cost;
@@ -984,6 +974,26 @@ void handle_city_info(const struct packet_city_info *packet)
   }
 }
 
+/************************************************************************//**
+  Handle city nationalities packet.
+****************************************************************************/
+void handle_city_nationalities(const struct packet_city_nationalities *packet)
+{
+  struct city *pcity = game_city_by_number(packet->id);
+
+  /* The nationality of the citizens. */
+  if (pcity != NULL && game.info.citizen_nationality) {
+    int i;
+
+    citizens_init(pcity);
+    for (i = 0; i < packet->nationalities_count; i++) {
+      citizens_nation_set(pcity, player_slot_by_number(packet->nation_id[i]),
+                          packet->nation_citizens[i]);
+    }
+    fc_assert(citizens_count(pcity) == city_size_get(pcity));
+  }
+}
+
 /************************************************************************//**
   A helper function for handling city-info and city-short-info packets.
   Naturally, both require many of the same operations to be done on the
diff --git a/common/fc_types.h b/common/fc_types.h
index 10b72511c9..ac6f2a4956 100644
--- a/common/fc_types.h
+++ b/common/fc_types.h
@@ -90,6 +90,8 @@ extern "C" {
 FC_STATIC_ASSERT(CITY_MAP_MAX_RADIUS <= 5, too_many_city_tiles);
 #define MAX_CITY_TILES (91)
 
+#define MAX_CITY_NATIONALITIES (MIN(MAX_NUM_PLAYER_SLOTS, MAX_CITY_SIZE))
+
 /* symbol to flag missing numbers for better debugging */
 #define IDENTITY_NUMBER_ZERO (0)
 
diff --git a/common/networking/packets.def b/common/networking/packets.def
index 40d5915591..ef5d3f79ca 100644
--- a/common/networking/packets.def
+++ b/common/networking/packets.def
@@ -697,7 +697,7 @@ end
 
 /************** City packets **********************/
 
-PACKET_CITY_REMOVE = 30; sc, dsend, lsend, cancel(PACKET_CITY_INFO), cancel(PACKET_WEB_CITY_INFO_ADDITION), cancel(PACKET_CITY_SHORT_INFO), handle-via-fields
+PACKET_CITY_REMOVE = 30; sc, dsend, lsend, cancel(PACKET_CITY_INFO), cancel(PACKET_WEB_CITY_INFO_ADDITION), cancel(PACKET_CITY_NATIONALITIES), cancel(PACKET_CITY_SHORT_INFO), handle-via-fields
   CITY city_id;
 end
 
@@ -719,10 +719,6 @@ PACKET_CITY_INFO = 31; sc, lsend, is-game-info, force, cancel(PACKET_CITY_SHORT_
   UINT8 specialists_size;
   CITIZENS specialists[SP_MAX:specialists_size];
 
-  UINT8 nationalities_count;
-  PLAYER nation_id[MAX_NUM_PLAYER_SLOTS:nationalities_count];
-  CITIZENS nation_citizens[MAX_NUM_PLAYER_SLOTS:nationalities_count];
-
   UINT32 history;
   UINT32 culture;
   UINT32 buy_cost;
@@ -778,13 +774,20 @@ PACKET_CITY_INFO = 31; sc, lsend, is-game-info, force, cancel(PACKET_CITY_SHORT_
   UNIT_ORDER rally_point_orders[MAX_LEN_ROUTE:rally_point_length];
 end
 
+PACKET_CITY_NATIONALITIES = 46; sc, lsend, is-game-info, force
+  CITY id; key
+  UINT8 nationalities_count;
+  PLAYER nation_id[MAX_CITY_NATIONALITIES:nationalities_count];
+  CITIZENS nation_citizens[MAX_CITY_NATIONALITIES:nationalities_count];
+end
+
 PACKET_CITY_UPDATE_COUNTER = 514; sc, lsend, is-game-info
   CITY city;
   COUNTER counter;
   UINT32 value;
 end
 
-PACKET_CITY_SHORT_INFO = 32; sc, lsend, is-game-info, cancel(PACKET_CITY_INFO), cancel(PACKET_WEB_CITY_INFO_ADDITION)
+PACKET_CITY_SHORT_INFO = 32; sc, lsend, is-game-info, cancel(PACKET_CITY_INFO), cancel(PACKET_WEB_CITY_INFO_ADDITION), cancel(PACKET_CITY_NATIONALITIES)
   CITY id; key
   TILE tile;
 
diff --git a/server/citizenshand.h b/server/citizenshand.h
index 31d268cbee..b511af8d37 100644
--- a/server/citizenshand.h
+++ b/server/citizenshand.h
@@ -15,8 +15,6 @@
 
 struct city;
 
-#define MAX_CITY_NATIONALITIES MIN(MAX_NUM_PLAYER_SLOTS, MAX_CITY_SIZE)
-
 struct citizens_reduction {
   struct player_slot *pslot;
   citizens change;
@@ -34,4 +32,4 @@ void citizens_reduction_apply(struct city *pcity,
 
 void citizens_print(const struct city *pcity);
 
-#endif  /* FC__CITIZENSHAND_H */
+#endif /* FC__CITIZENSHAND_H */
diff --git a/server/citytools.c b/server/citytools.c
index 6a50195d5d..9353585e40 100644
--- a/server/citytools.c
+++ b/server/citytools.c
@@ -2201,6 +2201,7 @@ void refresh_dumb_city(struct city *pcity)
 void broadcast_city_info(struct city *pcity)
 {
   struct packet_city_info packet;
+  struct packet_city_nationalities nat_packet;
   struct packet_web_city_info_addition web_packet;
   struct packet_city_short_info sc_pack;
   struct player *powner = city_owner(pcity);
@@ -2225,13 +2226,14 @@ void broadcast_city_info(struct city *pcity)
   }
 
   routes = traderoute_packet_list_new();
-  package_city(pcity, &packet, webp_ptr, routes, FALSE);
+  package_city(pcity, &packet, &nat_packet, webp_ptr, routes, FALSE);
 
   players_iterate(pplayer) {
     if (!send_city_suppressed || pplayer != powner) {
       if (can_player_see_city_internals(pplayer, pcity)) {
         update_dumb_city(pplayer, pcity);
         lsend_packet_city_info(pplayer->connections, &packet, FALSE);
+        lsend_packet_city_nationalities(pplayer->connections, &nat_packet, FALSE);
         web_lsend_packet(city_info_addition, pplayer->connections,
                          webp_ptr, FALSE);
         traderoute_packet_list_iterate(routes, route_packet) {
@@ -2250,6 +2252,7 @@ void broadcast_city_info(struct city *pcity)
   conn_list_iterate(game.est_connections, pconn) {
     if (conn_is_global_observer(pconn)) {
       send_packet_city_info(pconn, &packet, FALSE);
+      send_packet_city_nationalities(pconn, &nat_packet, FALSE);
       web_send_packet(city_info_addition, pconn, webp_ptr, FALSE);
     }
   } conn_list_iterate_end;
@@ -2360,6 +2363,7 @@ void send_city_info_at_tile(struct player *pviewer, struct conn_list *dest,
                             struct city *pcity, struct tile *ptile)
 {
   struct packet_city_info packet;
+  struct packet_city_nationalities nat_packet;
   struct packet_web_city_info_addition web_packet;
   struct packet_city_short_info sc_pack;
   struct player *powner = NULL;
@@ -2395,8 +2399,9 @@ void send_city_info_at_tile(struct player *pviewer, struct conn_list *dest,
 
       /* Send all info to the owner */
       update_dumb_city(powner, pcity);
-      package_city(pcity, &packet, webp_ptr, routes, FALSE);
+      package_city(pcity, &packet, &nat_packet, webp_ptr, routes, FALSE);
       lsend_packet_city_info(dest, &packet, FALSE);
+      lsend_packet_city_nationalities(dest, &nat_packet, FALSE);
       web_lsend_packet(city_info_addition, dest, webp_ptr, FALSE);
       traderoute_packet_list_iterate(routes, route_packet) {
         lsend_packet_traderoute_info(dest, route_packet);
@@ -2420,8 +2425,9 @@ void send_city_info_at_tile(struct player *pviewer, struct conn_list *dest,
         routes = traderoute_packet_list_new();
 
         /* Should be dumb_city info? */
-        package_city(pcity, &packet, webp_ptr, routes, FALSE);
+        package_city(pcity, &packet, &nat_packet, webp_ptr, routes, FALSE);
         lsend_packet_city_info(dest, &packet, FALSE);
+        lsend_packet_city_nationalities(dest, &nat_packet, FALSE);
         web_lsend_packet(city_info_addition, dest, webp_ptr, FALSE);
         traderoute_packet_list_iterate(routes, route_packet) {
           lsend_packet_traderoute_info(dest, route_packet);
@@ -2456,6 +2462,7 @@ void send_city_info_at_tile(struct player *pviewer, struct conn_list *dest,
   Fill city info packet with information about given city.
 ****************************************************************************/
 void package_city(struct city *pcity, struct packet_city_info *packet,
+                  struct packet_city_nationalities *nat_packet,
                   struct packet_web_city_info_addition *web_packet,
                   struct traderoute_packet_list *routes,
                   bool dipl_invest)
@@ -2491,7 +2498,8 @@ void package_city(struct city *pcity, struct packet_city_info *packet,
   } specialist_type_iterate_end;
 
   /* The nationality of the citizens. */
-  packet->nationalities_count = 0;
+  nat_packet->id = pcity->id;
+  nat_packet->nationalities_count = 0;
   if (game.info.citizen_nationality) {
     int cit = 0;
 
@@ -2501,11 +2509,11 @@ void package_city(struct city *pcity, struct packet_city_info *packet,
         /* This player should exist! */
         fc_assert(player_slot_get_player(pslot) != NULL);
 
-        packet->nation_id[packet->nationalities_count]
+        nat_packet->nation_id[nat_packet->nationalities_count]
           = player_slot_index(pslot);
-        packet->nation_citizens[packet->nationalities_count]
+        nat_packet->nation_citizens[nat_packet->nationalities_count]
           = nationality;
-        packet->nationalities_count++;
+        nat_packet->nationalities_count++;
 
         cit += nationality;
       }
@@ -2543,7 +2551,7 @@ void package_city(struct city *pcity, struct packet_city_info *packet,
 
       /* And repackage */
       recursion = TRUE;
-      package_city(pcity, packet, web_packet, routes, dipl_invest);
+      package_city(pcity, packet, nat_packet, web_packet, routes, dipl_invest);
       recursion = FALSE;
 
       return;
diff --git a/server/citytools.h b/server/citytools.h
index 62d1849d7e..d8db75e264 100644
--- a/server/citytools.h
+++ b/server/citytools.h
@@ -14,7 +14,7 @@
 #define FC__CITYTOOLS_H
 
 /* common */
-#include "events.h"		/* enum event_type */
+#include "events.h"             /* enum event_type */
 #include "packets.h"
 #include "unitlist.h"
 
@@ -30,12 +30,12 @@
 int build_points_left(struct city *pcity);
 
 void transfer_city_units(struct player *pplayer, struct player *pvictim, 
-			 struct unit_list *units, struct city *pcity,
-			 struct city *exclude_city,
-			 int kill_outside, bool verbose);
+                         struct unit_list *units, struct city *pcity,
+                         struct city *exclude_city,
+                         int kill_outside, bool verbose);
 bool transfer_city(struct player *ptaker, struct city *pcity,
-		   int kill_outside, bool transfer_unit_verbose,
-		   bool resolve_stack, bool raze, bool build_free);
+                   int kill_outside, bool transfer_unit_verbose,
+                   bool resolve_stack, bool raze, bool build_free);
 struct city *find_closest_city(const struct tile *ptile,
                                const struct city *pexclcity,
                                const struct player *pplayer,
@@ -47,14 +47,15 @@ bool unit_conquer_city(struct unit *punit, struct city *pcity);
 bool send_city_suppression(bool now);
 void send_city_info(struct player *dest, struct city *pcity);
 void send_city_info_at_tile(struct player *pviewer, struct conn_list *dest,
-			    struct city *pcity, struct tile *ptile);
+                            struct city *pcity, struct tile *ptile);
 void send_all_known_cities(struct conn_list *dest);
 void send_player_cities(struct player *pplayer);
 void broadcast_city_info(struct city *pcity);
 void package_city(struct city *pcity, struct packet_city_info *packet,
+                  struct packet_city_nationalities *nat_packet,
                   struct packet_web_city_info_addition *web_packet,
                   struct traderoute_packet_list *routes,
-		  bool dipl_invest);
+                  bool dipl_invest);
 
 void reality_check_city(struct player *pplayer, struct tile *ptile);
 bool update_dumb_city(struct player *pplayer, struct city *pcity);
@@ -64,7 +65,7 @@ void remove_dumb_city(struct player *pplayer, struct tile *ptile);
 void city_build_free_buildings(struct city *pcity);
 
 void create_city(struct player *pplayer, struct tile *ptile,
-		 const char *name, struct player *nationality);
+                 const char *name, struct player *nationality);
 bool create_city_for_player(struct player *pplayer, struct tile *ptile,
                             const char *name);
 void remove_city(struct city *pcity);
@@ -94,7 +95,7 @@ void change_build_target(struct player *pplayer, struct city *pcity,
                          enum event_type event);
 
 bool is_allowed_city_name(struct player *pplayer, const char *cityname,
-			  char *error_buf, size_t bufsz);
+                          char *error_buf, size_t bufsz);
 const char *city_name_suggestion(struct player *pplayer, struct tile *ptile);
 
 void city_freeze_workers(struct city *pcity);
diff --git a/server/diplomats.c b/server/diplomats.c
index f6bc1a4a22..7c6d74b56c 100644
--- a/server/diplomats.c
+++ b/server/diplomats.c
@@ -328,6 +328,7 @@ bool diplomat_investigate(struct player *pplayer, struct unit *pdiplomat,
   struct player *cplayer;
   struct packet_unit_short_info unit_packet;
   struct packet_city_info city_packet;
+  struct packet_city_nationalities nat_packet;
   struct packet_web_city_info_addition web_packet;
   struct traderoute_packet_list *routes;
   const struct unit_type *act_utype;
@@ -383,10 +384,11 @@ bool diplomat_investigate(struct player *pplayer, struct unit *pdiplomat,
   }
 
   routes = traderoute_packet_list_new();
-  package_city(pcity, &city_packet, webp_ptr, routes, TRUE);
+  package_city(pcity, &city_packet, &nat_packet, webp_ptr, routes, TRUE);
   /* We need to force to send the packet to ensure the client will receive
    * something and popup the city dialog. */
   lsend_packet_city_info(pplayer->connections, &city_packet, TRUE);
+  lsend_packet_city_nationalities(pplayer->connections, &nat_packet, TRUE);
   web_lsend_packet(city_info_addition, pplayer->connections, webp_ptr, TRUE);
   traderoute_packet_list_iterate(routes, route_packet) {
     lsend_packet_traderoute_info(pplayer->connections, route_packet);
-- 
2.35.1

